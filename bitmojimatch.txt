//Eylaf's bitmoji 
function drawBitmoji2 (x,y, size){
    var headWidth = size*0.6;
    
fill(197, 149, 204);
ellipse(x + 100 *(size/100), y + 191 *(size/100),136*(size/100),87*(size/100));

fill (27, 25, 28);
ellipse (x+100*(size/100),y+100*(size/100),119*(size/100),165*(size/100)); //headwear 
fill(255,224,189);
ellipse (x+100*(size/100),y+100*(size/100),111*(size/100),133*(size/100)); //head 
fill(235, 226, 226);
ellipse (x+75*(size/100),y+72*(size/100),24*(size/100),15*(size/100)); //eye 
ellipse (x+124*(size/100),y+72*(size/100),24*(size/100),15*(size/100)); //eye 

fill(0, 0, 0);
ellipse (x+75*(size/100),y+72*(size/100),9*(size/100),8*(size/100)); //eyes 
ellipse (x+124*(size/100),y+72*(size/100),9*(size/100),8*(size/100)); //eyes 

//mouse 
fill (247, 242, 242);
ellipse(x+100*(size/100),y+126*(size/100), 47*(size/100),20*(size/100)); 
fill(255, 224, 198);
noStroke();
rect(x+70*(size/100),y+113*(size/100),59*(size/100),12*(size/100));
stroke(13, 12, 13);
bezier(x+102*(size/100),y+89*(size/100),x+115*(size/100),y+97*(size/100),x+119*(size/100),y+107*(size/100),x+95*(size/100),y+108*(size/100)); //nose 
line(x+75*(size/100),y+124*(size/100),x+123*(size/100),y+124*(size/100));

fill(10, 9, 10);
// text 
textSize(30);
text("EA",x+80*(size/100),y+215*(size/100)); 

}


//Jackson's Bitmoji
var drawBitmoji = function(headX,headY,headHeight) {

noStroke();
//hat
fill(138, 136, 138);
arc((200*(headHeight/150)) + headX, (110*(headHeight/150)) + headY, 125*(headHeight/150), 200*(headHeight/150), 180, 360);
fill(153, 153, 153);
ellipse((200*(headHeight/150)) + headX, (130*(headHeight/150)) + headY, 250*(headHeight/150), 120*(headHeight/150));
//neck
fill(237, 204, 180);
rect((165*(headHeight/150)) + headX, (230*(headHeight/150)) + headY, 70*(headHeight/150), 50*(headHeight/150));
//head
fill(242, 216, 184);
ellipse((200*(headHeight/150)) + headX, (170*(headHeight/150)) + headY, 125*(headHeight/150), headHeight);
//hair
fill(116, 65, 171);
quad((163*(headHeight/150)) + headX, (112*(headHeight/150)) + headY, (180*(headHeight/150)) + headX, (98*(headHeight/150)) + headY, (147*(headHeight/150)) + headX, (113*(headHeight/150)) + headY, (137*(headHeight/150)) + headX, (170*(headHeight/150)) + headY); //left
quad((239*(headHeight/150)) + headX, (112*(headHeight/150)) + headY, (222*(headHeight/150)) + headX, (103*(headHeight/150)) + headY, (253*(headHeight/150)) + headX, (113*(headHeight/150)) + headY, (262*(headHeight/150)) + headX, (170*(headHeight/150)) + headY); //right
triangle((204*(headHeight/150)) + headX, (111*(headHeight/150)) + headY, (162*(headHeight/150)) + headX, (105*(headHeight/150)) + headY, (238*(headHeight/150)) + headX, (103*(headHeight/150)) + headY); //middle
quad((226*(headHeight/150)) + headX, (84*(headHeight/150)) + headY, (186*(headHeight/150)) + headX, (81*(headHeight/150)) + headY, (160*(headHeight/150)) + headX, (90*(headHeight/150)) + headY, (144*(headHeight/150)) + headX, (121*(headHeight/150)) + headY); //top left
quad((185*(headHeight/150)) + headX, (90*(headHeight/150)) + headY, (217*(headHeight/150)) + headX, (83*(headHeight/150)) + headY, (231*(headHeight/150)) + headX, (87*(headHeight/150)) + headY, (252*(headHeight/150)) + headX, (114*(headHeight/150)) + headY); //top right
ellipse((200*(headHeight/150)) + headX, (100*(headHeight/150)) + headY, 50*(headHeight/150), 20*(headHeight/150)); //top middle
//head shaping
fill(125, 138, 255);
quad((137*(headHeight/150)) + headX, (170*(headHeight/150)) + headY, (140*(headHeight/150)) + headX, (213*(headHeight/150)) + headY, (155*(headHeight/150)) + headX, (227*(headHeight/150)) + headY, (139*(headHeight/150)) + headX, (151*(headHeight/150)) + headY); //left
quad((266*(headHeight/150)) + headX, (170*(headHeight/150)) + headY, (260*(headHeight/150)) + headX, (213*(headHeight/150)) + headY, (245*(headHeight/150)) + headX, (227*(headHeight/150)) + headY, (262*(headHeight/150)) + headX, (151*(headHeight/150)) + headY); //right
//ears
fill(242, 216, 184);
ellipse((142*(headHeight/150)) + headX, (170*(headHeight/150)) + headY, 18*(headHeight/150), 35*(headHeight/150)); //left
ellipse((258*(headHeight/150)) + headX, (170*(headHeight/150)) + headY, 18*(headHeight/150), 35*(headHeight/150)); //right

//EYES
fill(107, 78, 55);
ellipse((172*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 21*(headHeight/150), 14*(headHeight/150)); //left outline
ellipse((228*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 21*(headHeight/150), 14*(headHeight/150)); //right outline
fill(255, 255, 255);
ellipse((172*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 20*(headHeight/150), 13*(headHeight/150)); //left eye white
ellipse((228*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 20*(headHeight/150), 13*(headHeight/150)); //right eye white
fill(92, 57, 30);
ellipse((172*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 13*(headHeight/150), 13*(headHeight/150)); //left iris
ellipse((228*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 13*(headHeight/150), 13*(headHeight/150)); //right iris
fill(0, 0, 0);
ellipse((172*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 7*(headHeight/150), 7*(headHeight/150)); //left pupil
ellipse((228*(headHeight/150)) + headX, (159*(headHeight/150)) + headY, 7*(headHeight/150), 7*(headHeight/150)); //right pupil

//NOSE
fill(232, 195, 169);
ellipse((200*(headHeight/150)) + headX, (192*(headHeight/150)) + headY, 20*(headHeight/150), 15*(headHeight/150)); //bottom
quad((205*(headHeight/150)) + headX, (155*(headHeight/150)) + headY, (195*(headHeight/150)) + headX, (155*(headHeight/150)) + headY, (191*(headHeight/150)) + headX, (196*(headHeight/150)) + headY, (209*(headHeight/150)) + headX, (196*(headHeight/150)) + headY); //bridge

//MOUTH
fill(230, 158, 122);
arc((200*(headHeight/150)) + headX, (214*(headHeight/150)) + headY, 30*(headHeight/150), 10*(headHeight/150), -15, 180); //bottom lip
ellipse((197*(headHeight/150)) + headX, (215*(headHeight/150)) + headY, 10*(headHeight/150), 5*(headHeight/150)); //left top lip
ellipse((203*(headHeight/150)) + headX, (215*(headHeight/150)) + headY, 10*(headHeight/150), 5*(headHeight/150)); //right top lip

//EYEBROWS
fill(107, 78, 55);
triangle((166*(headHeight/150)) + headX,(144*(headHeight/150)) + headY, (156*(headHeight/150)) + headX,(149*(headHeight/150)) + headY, (171*(headHeight/150)) + headX,(148*(headHeight/150)) + headY); //left eyebrow tail 
triangle((232*(headHeight/150)) + headX, (144*(headHeight/150)) + headY, (242*(headHeight/150)) + headX, (149*(headHeight/150)) + headY, (227*(headHeight/150)) + headX, (148*(headHeight/150)) + headY); //right eyebrow tail
rect((166*(headHeight/150)) + headX, (144*(headHeight/150)) + headY, 18*(headHeight/150), 4*(headHeight/150)); //left eyebrow front
rect((214*(headHeight/150)) + headX, (144*(headHeight/150)) + headY, 18*(headHeight/150), 4*(headHeight/150)); //right eyebrow front

//BODY
fill(130, 50, 60); //red shirt color
rect((50*(headHeight/150)) + headX, (250*(headHeight/150)) + headY, 300*(headHeight/150), 300*(headHeight/150)); //red shirt base
fill(125, 138, 255);
arc((71*(headHeight/150)) + headX,(269*(headHeight/150)) + headY, 100*(headHeight/150), 100*(headHeight/150), 118, 337); //left shoulder shaping
arc((326*(headHeight/150)) + headX, (269*(headHeight/150)) + headY, 100*(headHeight/150), 100*(headHeight/150), -156, 59); //right shoulder shaping
fill(10, 0, 0); 
triangle((165*(headHeight/150)) + headX, (250*(headHeight/150)) + headY, (235*(headHeight/150)) + headX, (250*(headHeight/150)) + headY, (200*(headHeight/150)) + headX, (538*(headHeight/150)) + headY); //black shirt
//NECK
fill(237, 204, 180);
arc((200*(headHeight/150)) + headX, (250*(headHeight/150)) + headY, 80*(headHeight/150), 40*(headHeight/150), 0, 180);
//SHIRT DETAILS
fill(105, 37, 46); //dark red shirt color
quad((150*(headHeight/150)) + headX, (243*(headHeight/150)) + headY, (175*(headHeight/150)) + headX, (264*(headHeight/150)) + headY, (169*(headHeight/150)) + headX, (284*(headHeight/150)) + headY, (139*(headHeight/150)) + headX, (259*(headHeight/150)) + headY); //left collar
quad((250*(headHeight/150)) + headX, (243*(headHeight/150)) + headY, (225*(headHeight/150)) + headX, (264*(headHeight/150)) + headY, (231*(headHeight/150)) + headX, (284*(headHeight/150)) + headY, (261*(headHeight/150)) + headX, (259*(headHeight/150)) + headY); //left collar
stroke(105, 37, 46);
strokeWeight(3);
line((103*(headHeight/150)) + headX,(344*(headHeight/150)) + headY, (103*(headHeight/150)) + headX,(549*(headHeight/150)) + headY); //left arm
line((293*(headHeight/150)) + headX,(344*(headHeight/150)) + headY,(293*(headHeight/150)) + headX,(549*(headHeight/150)) + headY); //right arm
stroke(0, 0, 0);
strokeWeight(1);
};
//END OF BITMOJIS


//copy in khan button class
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    noStroke();
    fill(117, 217, 136);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    fill(255, 255, 255);
    textSize(25);
    text(this.label, this.x+12, this.y+this.height/1.5);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};
//end khan button class

//Global Variables
var screen = 3; //controls what screen is displayed. 0 is 1st screen, 1 is 2nd screen, etc.

//Buttons
var startButton = new Button({
        x: 120,
        y: 300,
        label: "     Start!",
        onClick: function() {
            screen = 1;
        }
    });
    
var playButton = new Button({
        x: 120,
        y: 300,
        label: "     Play!",
        onClick: function() {
            screen = 2;
        }
    });

var startOverButton = new Button({
        x: 120,
        y: 175,
        label: "Start Over?",
        onClick: function() {
            screen = 0;
        }
    });
    

//Screen #0
var splashScreen = function ()
{
    background(125, 138, 255);

    startButton.draw();

    fill(255, 255, 255);
    textSize(40);
    text("Bitmoji Match", 80, 100);
    
    drawBitmoji(50,126,33);
    drawBitmoji2(245,126,54);
    
    fill(72, 0, 255);
    rect(0, 375, 400, 100);
    fill(255, 255, 255);
    textSize(15);
    text("Game by Eylaf and Jackson", 100, 392); 

};

//Screen #1
var howToPlay = function()
{
    background(125, 138, 255);
    
    playButton.draw();
    
    fill(255, 255, 255);
    textSize(40);
    text("How To Play:", 80, 100);
    textSize(15);
    text("Each player turns over 2 cards.", 70, 135);
    text("If the cards match, the player gets a point.", 70, 160);
    text("After each point, the board reshuffles", 70, 185);
    text("It is then the other player's turn.", 70, 210);
    text("Play until 5 points.", 70, 235);
    text("If the cards don't match, they turn back over.", 70, 260);
    text("It is then the other player's turn.", 70, 285);
};

//Screen #2
var gameScreen = function() {
    var Tile = function(x, y, face) {
        this.x = x;
        this.y = y;
        this.size = 50;
        this.face = face;
        this.isFaceUp = false;
        this.isMatch = false;
    };
    
    Tile.prototype.draw = function() {
        fill(177, 58, 201);
        strokeWeight(1);
        ellipse(this.x + this.size / 2, this.y + this.size / 2, this.size, this.size);
        if (this.isFaceUp) {
            image(this.face, this.x, this.y, this.size, this.size);
        } else {
            image(getImage("avatars/duskpin-seed"), this.x, this.y, this.size, this       .size);
        }
    };
    
    Tile.prototype.isUnderMouse = function(x, y) {
        return dist(x, y, this.x + this.size / 2, this.y + this.size / 2) < this.size     / 2;
    };
    
    // Global config
    var NUM_COLS = 6;
    var NUM_ROWS = 5;
    
    // Declare an array of all possible faces
    var faces = [
        getImage("avatars/mr-pants-purple"),
        getImage("avatars/marcimus-purple"),
        getImage("avatars/duskpin-sapling"),
        getImage("avatars/duskpin-seedling"),
        getImage("avatars/duskpin-tree"),
        getImage("avatars/duskpin-ultimate"),
        getImage("avatars/mr-pants-pink"),
        getImage("avatars/purple-pi"),
        getImage("avatars/old-spice-man"),// bitmoji 
        getImage("avatars/robot_female_1"),//bitmoji
        getImage("avatars/leafers-seed"),
        getImage("avatars/leafers-ultimate"),
        getImage("avatars/duskpin-seed"),
        getImage("avatars/duskpin-seedling"),
        getImage("avatars/duskpin-sapling"),
        getImage("avatars/leaf-green"),
        getImage("avatars/leaf-orange"),
        getImage("avatars/leaf-yellow"),
        getImage("avatars/leaf-red")
    ];
    
    // Make an array which has 2 of each, then randomize it
    var possibleFaces = faces.slice(0);
    var selected = [];
    for (var i = 0; i < (NUM_COLS * NUM_ROWS) / 2; i++) {
        // Randomly pick one from the array of remaining faces
        var randomInd = floor(random(possibleFaces.length));
        var face = possibleFaces[randomInd];
        // Push twice onto array
        selected.push(face);
        selected.push(face);
        // Remove from array
        possibleFaces.splice(randomInd, 1);
    }
    
    // Now shuffle the elements of that array
    var shuffleArray = function(array) {
        var counter = array.length;
    
        // While there are elements in the array
        while (counter > 0) {
            // Pick a random index
            var ind = Math.floor(Math.random() * counter);
            // Decrease counter by 1
            counter--;
            // And swap the last element with it
            var temp = array[counter];
            array[counter] = array[ind];
            array[ind] = temp;
        }
    };
    shuffleArray(selected);
    
    // Create the tiles
    var tiles = [];
    for (var i = 0; i < NUM_COLS; i++) {
        for (var j = 0; j < NUM_ROWS; j++) {
            var tileX = i * 54 + 10;
            var tileY = j * 54 + 40;
            var tileFace = selected.pop();
            tiles.push(new Tile(tileX, tileY, tileFace));
        }
    }
    
    // Adjust canvas size based on the number of tiles
    var canvasWidth = NUM_COLS * 54 + 20;
    var canvasHeight = NUM_ROWS * 54 + 50;
    
    background(235, 234, 242);
    
    var currentPlayer = 1;
    var player1Tries = 0;
    var player2Tries = 0;
    var player1Score = 0;
    var player2Score = 0;
    var numMatches = 0;
    var flippedTiles = [];
    var delayStartFC = null;
    
    function resetUnmatchedTiles() {
        for (var i = 0; i < tiles.length; i++) {
            var tile = tiles[i];
            if (!tile.isMatch) {
                tile.isFaceUp = false;
            }
        }
        flippedTiles = [];
        delayStartFC = null;
        shuffleArray(tiles);
    }
    
    mouseClicked = function() {
        for (var i = 0; i < tiles.length; i++) {
            var tile = tiles[i];
            if (tile.isUnderMouse(mouseX, mouseY)) {
                if (flippedTiles.length < 2 && !tile.isFaceUp) {
                    tile.isFaceUp = true;
                    flippedTiles.push(tile);
                    if (flippedTiles.length === 2) {
                        if (currentPlayer === 1) {
                            player1Tries++;
                            currentPlayer = 2;
                        } else {
                            player2Tries++;
                            currentPlayer = 1;
                        }
                        if (flippedTiles[0].face === flippedTiles[1].face) {
                            if (currentPlayer === 1) {
                                player1Score++;
                            } else {
                                player2Score++;
                            }
                            flippedTiles[0].isMatch = true;
                            flippedTiles[1].isMatch = true;
                            flippedTiles.length = 0;
                            numMatches++;
                        } else {
                            delayStartFC = frameCount;
                        }
                    }
                } 
                loop();
            }
        }
    };
    
    draw = function() {
        background(145, 142, 237);
        
        // Display player turn text
        fill(0);
        textSize(18);
        textAlign(CENTER, CENTER);
        if (currentPlayer === 1) {
            text("Player 1's Turn", width / 2, 20);
        } else {
            text("Player 2's Turn", width / 2, 20);
        }
        
        // Display scores
        textSize(16);
        text("Player 1 Score: " + player1Score, 60, height - 20);
        text("Player 2 Score: " + player2Score, width - 120, height - 20);
        
        // Check delay for flipping tiles
        if (delayStartFC && (frameCount - delayStartFC) > 30) {
            resetUnmatchedTiles();
            noLoop();
        }
        
        // Draw tiles
        for (var i = 0; i < tiles.length; i++) {
            tiles[i].draw();
        }
        
        // Display game over message
        if (numMatches === tiles.length/2) { //win condition (CHANGE THIS)
            screen = 3; //change screen when a win is detected
            fill(0);
            textSize(20);
            if (player1Score > player2Score) {
                text("Player 1 wins with " + player1Score + " matches!", width / 2,       height - 40);
            } else if (player2Score > player1Score) {
                text("Player 2 wins with " + player2Score + " matches!", width / 2,       height - 40);
            } else {
                text("It's a tie! Both players have " + player1Score + " matches!",       width / 2, height - 40);
            }
        }
    };
    noLoop();
};


//Screen #3
var winScreen = function() {
    background(125, 138, 255);
    strokeWeight(3);
    stroke(72, 0, 255);
    fill(168, 127, 255);
    rect(20, 20, 360, 230, 5);
    strokeWeight(1);

    startOverButton.draw();

    fill(255, 255, 255);
    textSize(40);
    text("Player _ Wins,", 68, 80);
    text("Congratulations!", 53, 135); 
    
    drawBitmoji(250,270,32);
    drawBitmoji2(45,260,51);
    
    fill(72, 0, 255);
    rect(0, 375, 400, 100); //footer
    fill(255, 255, 255);
    textSize(15);
    text("Game by Eylaf and Jackson", 100, 392); 

};

//controls what happens when mouse is clicked
mouseClicked = function() {
    if(screen === 0) {
        startButton.handleMouseClick();
    }
    else if(screen === 1){
        playButton.handleMouseClick();
    }
    else if(screen === 3) {
        startOverButton.handleMouseClick();
    }
};

//Draw Screens
draw = function() {
    if (screen === 0) {
        splashScreen();
    }
    else if (screen === 1) {
        howToPlay();
    }
    else if (screen === 2){
        gameScreen();
    }
    else if (screen === 3) {
        winScreen();
    }
};

